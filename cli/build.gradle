plugins {
    id "com.github.johnrengelman.shadow"
    id "java"
    id "signing"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "io.github.lxgaming"
archivesBaseName = "reconstruct-cli"
version = version

configurations {
    shadow {
        runtime.extendsFrom(shadow)
    }

    build.dependsOn("signJar")
    compileJava.dependsOn(":reconstruct-common:build")
    jar.enabled = false
    jar.dependsOn("shadowJar")
}

repositories {
}

dependencies {
    shadow(project(path: ":reconstruct-common")) {
        exclude(module: "proguard-base")
    }
    shadow("com.beust:jcommander:1.78")
    annotationProcessor("org.apache.logging.log4j:log4j-core:2.13.3")
    shadow("org.apache.logging.log4j:log4j-core:2.13.3")
    shadow("org.apache.logging.log4j:log4j-slf4j-impl:2.13.3")
    shadow("org.fusesource.jansi:jansi:1.18")
}

jar {
    manifest {
        attributes("Main-Class": "io.github.lxgaming.reconstruct.cli.Main")
    }
}

shadowJar {
    archiveClassifier.set(null)
    configurations = [project.configurations.shadow]

    exclude {
        // Exclude the Log4j2Plugins.dat file so logging works. Log4j2PluginsCacheFileTransformer doesn't work.
        if (it.path == "META-INF/org/apache/logging/log4j/core/config/plugins/Log4j2Plugins.dat") {
            return true
        }

        return false
    }
}

task signJar {
    doFirst {
        if (!project.hasProperty("signing.keyStorePath") || !project.hasProperty("signing.secretKeyRingFile")) {
            project.logger.warn("========== [WARNING] ==========")
            project.logger.warn("")
            project.logger.warn("   This build is not signed!   ")
            project.logger.warn("")
            project.logger.warn("========== [WARNING] ==========")
            throw new StopExecutionException()
        }
    }

    doLast {
        configurations.archives.allArtifacts.files.each {
            ant.signjar(
                jar: it,
                alias: project.property("signing.alias"),
                storepass: project.property("signing.keyStorePassword"),
                keystore: project.property("signing.keyStorePath"),
                keypass: project.property("signing.keyStorePassword"),
                preservelastmodified: project.property("signing.preserveLastModified"),
                tsaurl: project.property("signing.timestampAuthority"),
                digestalg: project.property("signing.digestAlgorithm")
            )
            project.logger.lifecycle("JAR Signed: " + it.name)

            signing.sign(it)
            project.logger.lifecycle("PGP Signed: " + it.name)
        }
    }
}